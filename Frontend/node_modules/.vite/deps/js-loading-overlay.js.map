{
  "version": 3,
  "sources": ["../../js-loading-overlay/dist/webpack:/webpack/bootstrap", "../../js-loading-overlay/dist/webpack:/src/js-loading-overlay.js"],
  "sourcesContent": [" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n", "class JSLoadingOverlay\n{\n    constructor() {\n        this.options = {\n            'overlayBackgroundColor': '#666666',\n            'overlayOpacity': 0.6,\n            'spinnerIcon': 'ball-circus',\n            'spinnerColor': '#000',\n            'spinnerSize': '3x',\n            'overlayIDName': 'overlay',\n            'spinnerIDName': 'spinner',\n            'offsetY': 0,\n            'offsetX': 0,\n            'lockScroll': false,\n            'containerID': null,\n            'spinnerZIndex': 99999,\n            'overlayZIndex': 99998\n        };\n        this.stylesheetBaseURL = 'https://cdn.jsdelivr.net/npm/load-awesome@1.1.0/css/';\n        this.spinner = null;\n        this.spinnerStylesheetURL = null;\n        this.numberOfEmptyDivForSpinner = {\n            'ball-8bits' : 16,\n            'ball-atom': 4,\n            'ball-beat': 3,\n            'ball-circus': 5,\n            'ball-climbing-dot': 1,\n            'ball-clip-rotate': 1,\n            'ball-clip-rotate-multiple': 2,\n            'ball-clip-rotate-pulse': 2,\n            'ball-elastic-dots': 5,\n            'ball-fall': 3,\n            'ball-fussion': 4,\n            'ball-grid-beat': 9,\n            'ball-grid-pulse': 9,\n            'ball-newton-cradle': 4,\n            'ball-pulse': 3,\n            'ball-pulse-rise': 5,\n            'ball-pulse-sync': 3,\n            'ball-rotate': 1,\n            'ball-running-dots': 5,\n            'ball-scale': 1,\n            'ball-scale-multiple': 3,\n            'ball-scale-pulse': 2,\n            'ball-scale-ripple': 1,\n            'ball-scale-ripple-multiple': 3,\n            'ball-spin': 8,\n            'ball-spin-clockwise' : 8,\n            'ball-spin-clockwise-fade' : 8,\n            'ball-spin-clockwise-fade-rotating' : 8,\n            'ball-spin-fade' : 8,\n            'ball-spin-fade-rotating' : 8,\n            'ball-spin-rotate' : 2,\n            'ball-square-clockwise-spin' : 8,\n            'ball-square-spin' : 8,\n            'ball-triangle-path' : 3,\n            'ball-zig-zag' : 2,\n            'ball-zig-zag-deflect' : 2,\n            'cog' : 1,\n            'cube-transition' : 2,\n            'fire' : 3,\n            'line-scale' : 5,\n            'line-scale-party' : 5,\n            'line-scale-pulse-out' : 5,\n            'line-scale-pulse-out-rapid' : 5,\n            'line-spin-clockwise-fade' : 8,\n            'line-spin-clockwise-fade-rotating' : 8,\n            'line-spin-fade' : 8,\n            'line-spin-fade-rotating' : 8,\n            'pacman' : 6,\n            'square-jelly-box' : 2,\n            'square-loader' : 1,\n            'square-spin' : 1,\n            'timer' : 1,\n            'triangle-skew-spin' : 1,\n        }\n    }\n\n    /**\n     * Show loading overlay including the spinner.\n     *\n     * @param options\n     */\n    show(options) {\n        // Override default options if options parameter exist.\n        this.setOptions(options);\n\n        // Add spinner stylesheet from https://cdn.jsdelivr.net in head.\n        this.addSpinnerStylesheet();\n\n        // Generate spinner html element.\n        this.generateSpinnerElement();\n\n        if (this.options.lockScroll) {\n            document.body.style.overflow = 'hidden';\n            document.documentElement.style.overflow = 'hidden';\n        }\n\n        // Generate overlay html element in full page.\n        this.generateAndAddOverlayElement();\n    }\n\n    /**\n     * Hide Loading Overlay\n     */\n    hide() {\n        // Unlock scroll.\n        if (this.options.lockScroll) {\n            document.body.style.overflow = '';\n            document.documentElement.style.overflow = '';\n        }\n\n        var stylesheet = document.getElementById('loading-overlay-stylesheet');\n\n        // Remove stylesheet.\n        if (stylesheet) {\n            stylesheet.disabled = true;\n            stylesheet.parentNode.removeChild(stylesheet);\n\n            document.getElementById(this.options.overlayIDName).remove();\n            document.getElementById(this.options.spinnerIDName).remove();\n        }\n    }\n\n    /**\n     * Override default options with user specified options.\n     *\n     * @param options\n     */\n    setOptions(options) {\n        if (typeof options !== 'undefined') {\n            for (let key in options) {\n                this.options[key] = options[key];\n            }\n        }\n    }\n\n    /**\n     * Generate overlay html element in full page.\n     * - class name\n     * - background color\n     * - opacity\n     *\n     * @returns {string}\n     */\n    generateAndAddOverlayElement() {\n        let left = '50%';\n\n        // Check if spinner X offset not zero\n        if (this.options.offsetX !== 0) {\n            left = 'calc(50% + ' + this.options.offsetX + ')'\n        }\n\n        let top = '50%';\n\n        // Check if spinner Y offset not zero\n        if (this.options.offsetY !== 0) {\n            top = 'calc(50% + ' + this.options.offsetY + ')'\n        }\n\n        // Generate overlay html element in container.\n        if (this.options.containerID && document.body.contains(document.getElementById(this.options.containerID))) {\n            let loadingOverlay = `<div id=\"${this.options.overlayIDName}\" style=\"display: block !important; position: absolute; top: 0; left: 0; overflow: auto; opacity: ${this.options.overlayOpacity}; background: ${this.options.overlayBackgroundColor}; z-index: 50; width: 100%; height: 100%;\"></div><div id=\"${this.options.spinnerIDName}\" style=\"display: block !important; position: absolute; top: ${top}; left: ${left}; -webkit-transform: translate(-50%); -ms-transform: translate(-50%); transform: translate(-50%); z-index: 9999;\">${this.spinner}</div>`\n\n            let containerID = document.getElementById(this.options.containerID);\n\n            containerID.style.position = 'relative';\n            containerID.insertAdjacentHTML('beforeend', loadingOverlay);\n            return;\n        }\n\n        let loadingOverlay = `<div id=\"${this.options.overlayIDName}\" style=\"display: block !important; position: fixed; top: 0; left: 0; overflow: auto; opacity: ${this.options.overlayOpacity}; background: ${this.options.overlayBackgroundColor}; z-index: ${this.options.overlayZIndex}; width: 100%; height: 100%;\"></div><div id=\"${this.options.spinnerIDName}\" style=\"display: block !important; position: fixed; top: ${top}; left: ${left}; -webkit-transform: translate(-50%); -ms-transform: translate(-50%); transform: translate(-50%); z-index: ${this.options.spinnerZIndex};\">${this.spinner}</div>`\n\n        // Insert the overlay html element in body.\n        document.body.insertAdjacentHTML(\"beforeend\", loadingOverlay);\n    }\n\n    /**\n     * Generate spinner html element. Spinner html element must follow template from https://github.danielcardoso.net/load-awesome/\n     */\n    generateSpinnerElement()\n    {\n        let emptyDivKey = Object.keys(this.numberOfEmptyDivForSpinner).find(element => element === this.options.spinnerIcon);\n\n        let emptyDivElement = this.generateEmptyDivElement(this.numberOfEmptyDivForSpinner[emptyDivKey]);\n\n        this.spinner = `<div style=\"color: ${this.options.spinnerColor}\" class=\"la-${ this.options.spinnerIcon } la-${this.options.spinnerSize}\">${ emptyDivElement }</div>`\n    }\n\n    /**\n     * Add spinner stylesheet tag in head section.\n     * All stylesheet URL are from CDN. Using Load Awesome CSS Spinner.\n     *\n     * @see https://github.danielcardoso.net/load-awesome/\n     * @see https://www.jsdelivr.com/package/npm/load-awesome?path=css\n     */\n    addSpinnerStylesheet() {\n        this.setSpinnerStylesheetURL();\n\n        let link = document.createElement('link');\n        link.setAttribute('id', 'loading-overlay-stylesheet');\n        link.setAttribute('rel', 'stylesheet');\n        link.setAttribute('type', 'text/css');\n        link.setAttribute('href', this.spinnerStylesheetURL);\n\n        document.getElementsByTagName('head')[0].appendChild(link);\n    }\n\n    /**\n     * Set spinner stylesheet based on the icon specify in options.\n     * All stylesheet URL are from CDN. Using Load Awesome CSS Spinner.\n     *\n     * @see https://github.danielcardoso.net/load-awesome/\n     * @see https://www.jsdelivr.com/package/npm/load-awesome?path=css\n     *\n     * @returns {string}\n     */\n    setSpinnerStylesheetURL() {\n        this.spinnerStylesheetURL = this.stylesheetBaseURL + this.options.spinnerIcon + '.min.css'\n    }\n\n    /**\n     * Generate empty div element for spinner element.\n     *\n     * @param numberOfEmptyDiv\n     * @returns {string}\n     */\n    generateEmptyDivElement(numberOfEmptyDiv) {\n        let emptyDivElement = '';\n\n        for (let i=1; i <= numberOfEmptyDiv; i++) {\n            emptyDivElement += '<div></div>'\n        }\n\n        return emptyDivElement;\n    }\n}\n\nwindow.JsLoadingOverlay = new JSLoadingOverlay();\n\nmodule.exports = JsLoadingOverlay;"],
  "mappings": ";;AACE,MAAIA,IAAmB,CAAA;AAGvB,WAASC,EAAoBC,GAAAA;AAG5B,QAAGF,EAAiBE,CAAAA;AACnB,aAAOF,EAAiBE,CAAAA,EAAUC;AAGnC,QAAIC,IAASJ,EAAiBE,CAAAA,IAAY,EACzCG,GAAGH,GACHI,GAAAA,OACAH,SAAS,CAAA,EAAA;AAUV,WANAI,EAAQL,CAAAA,EAAUM,KAAKJ,EAAOD,SAASC,GAAQA,EAAOD,SAASF,CAAAA,GAG/DG,EAAOE,IAAAA,MAGAF,EAAOD;EAAAA;AAKfF,IAAoBQ,IAAIF,GAGxBN,EAAoBS,IAAIV,GAGxBC,EAAoBU,IAAI,SAASR,IAASS,IAAMC,GAAAA;AAC3CZ,MAAoBa,EAAEX,IAASS,EAAAA,KAClCG,OAAOC,eAAeb,IAASS,IAAM,EAAEK,YAAAA,MAAkBC,KAAKL,EAAAA,CAAAA;EAAAA,GAKhEZ,EAAoBkB,IAAI,SAAShB,IAAAA;AACX,mBAAA,OAAXiB,UAA0BA,OAAOC,eAC1CN,OAAOC,eAAeb,IAASiB,OAAOC,aAAa,EAAEC,OAAO,SAAA,CAAA,GAE7DP,OAAOC,eAAeb,IAAS,cAAc,EAAEmB,OAAAA,KAAO,CAAA;EAAA,GAQvDrB,EAAoBsB,IAAI,SAASD,IAAOE,IAAAA;AAEvC,QADU,IAAPA,OAAUF,KAAQrB,EAAoBqB,EAAAA,IAC/B,IAAPE;AAAU,aAAOF;AACpB,QAAW,IAAPE,MAA8B,YAAA,OAAVF,MAAsBA,MAASA,GAAMG;AAAY,aAAOH;AAChF,QAAII,IAAKX,uBAAOY,OAAO,IAAA;AAGvB,QAFA1B,EAAoBkB,EAAEO,CAAAA,GACtBX,OAAOC,eAAeU,GAAI,WAAW,EAAET,YAAAA,MAAkBK,OAAOA,GAAAA,CAAAA,GACtD,IAAPE,MAA4B,YAAA,OAATF;AAAmB,eAAQM,KAAON;AAAOrB,UAAoBU,EAAEe,GAAIE,IAAK,SAASA,IAAAA;AAAO,iBAAON,GAAMM,EAAAA;QAAAA,GAAQC,KAAK,MAAMD,CAAAA,CAAAA;AAC9I,WAAOF;EAAAA,GAIRzB,EAAoB6B,IAAI,SAAS1B,IAAAA;AAChC,QAAIS,KAAST,MAAUA,GAAOqB,aAC7B,WAAA;AAAwB,aAAOrB,GAAgB;IAAA,IAC/C,WAAA;AAA8B,aAAOA;IAAAA;AAEtC,WADAH,EAAoBU,EAAEE,IAAQ,KAAKA,EAAAA,GAC5BA;EAAAA,GAIRZ,EAAoBa,IAAI,SAASiB,IAAQC,IAAAA;AAAY,WAAOjB,OAAOkB,UAAUC,eAAe1B,KAAKuB,IAAQC,EAAAA;EAAAA,GAGzG/B,EAAoBkC,IAAI,IAIjBlC,EAAoBA,EAAoBmC,IAAI,CAAA;AAAA,EAAA,CAAA,SAAA,GAAA,GAAA,GAAA;AAAA,IAAA,UAAA,EAAA,CAAA;AAAA,GAAA,SAAA,GAAA,GAAA;AAAA,WAAA,EAAAC,IAAAd,IAAA;AAAA,aAAAO,KAAA,GAAAA,KAAAP,GAAA,QAAAO,MAAA;AAAA,UAAAhB,KAAAS,GAAAO,EAAA;AAAA,MAAAhB,GAAA,aAAAA,GAAA,cAAA,OAAAA,GAAA,eAAA,MAAA,WAAAA,OAAAA,GAAA,WAAA,OAAA,OAAA,eAAAuB,IAAAvB,GAAA,KAAAA,EAAA;IAAA;EAAA;AAAA,MClF/CwB,IAAAA,WAAAA;AAEF,aAAAD,KAAA;AAAA,OAAA,SAAAA,IAAAd,IAAA;AAAA,YAAA,EAAAc,cAAAd;AAAA,gBAAA,IAAA,UAAA,mCAAA;MAAA,EAAc,MAAAc,EAAA,GACVE,KAAKC,UAAU,EACX,wBAA0B,WAC1B,gBAAkB,KAClB,aAAe,eACf,cAAgB,QAChB,aAAe,MACf,eAAiB,WACjB,eAAiB,WACjB,SAAW,GACX,SAAW,GACX,YAAA,OACA,aAAe,MACf,eAAiB,OACjB,eAAiB,MAAA,GAErBD,KAAKE,oBAAoB,wDACzBF,KAAKG,UAAU,MACfH,KAAKI,uBAAuB,MAC5BJ,KAAKK,6BAA6B,EAC9B,cAAe,IACf,aAAa,GACb,aAAa,GACb,eAAe,GACf,qBAAqB,GACrB,oBAAoB,GACpB,6BAA6B,GAC7B,0BAA0B,GAC1B,qBAAqB,GACrB,aAAa,GACb,gBAAgB,GAChB,kBAAkB,GAClB,mBAAmB,GACnB,sBAAsB,GACtB,cAAc,GACd,mBAAmB,GACnB,mBAAmB,GACnB,eAAe,GACf,qBAAqB,GACrB,cAAc,GACd,uBAAuB,GACvB,oBAAoB,GACpB,qBAAqB,GACrB,8BAA8B,GAC9B,aAAa,GACb,uBAAwB,GACxB,4BAA6B,GAC7B,qCAAsC,GACtC,kBAAmB,GACnB,2BAA4B,GAC5B,oBAAqB,GACrB,8BAA+B,GAC/B,oBAAqB,GACrB,sBAAuB,GACvB,gBAAiB,GACjB,wBAAyB,GACzB,KAAQ,GACR,mBAAoB,GACpB,MAAS,GACT,cAAe,GACf,oBAAqB,GACrB,wBAAyB,GACzB,8BAA+B,GAC/B,4BAA6B,GAC7B,qCAAsC,GACtC,kBAAmB,GACnB,2BAA4B,GAC5B,QAAW,GACX,oBAAqB,GACrB,iBAAkB,GAClB,eAAgB,GAChB,OAAU,GACV,sBAAuB,EAAA;IAAA;AAAA,QAAArB,IAAAT,IAAA;AAAA,WAAAS,KAAAc,KAAAvB,KAAA,CAAA,EAAA,KAAA,QAAA,OAAA,SAS1B0B,IAAAA;AAEDD,WAAKM,WAAWL,EAAAA,GAGhBD,KAAKO,qBAAAA,GAGLP,KAAKQ,uBAAAA,GAEDR,KAAKC,QAAQQ,eACbC,SAASC,KAAKC,MAAMC,WAAW,UAC/BH,SAASI,gBAAgBF,MAAMC,WAAW,WAI9Cb,KAAKe,6BAAAA;IAAAA,EAAAA,GAAAA,EAAAA,KAAAA,QAAAA,OAAAA,WAAAA;AAQDf,WAAKC,QAAQQ,eACbC,SAASC,KAAKC,MAAMC,WAAW,IAC/BH,SAASI,gBAAgBF,MAAMC,WAAW;AAG9C,UAAIG,KAAaN,SAASO,eAAe,4BAAA;AAGrCD,MAAAA,OACAA,GAAWE,WAAAA,MACXF,GAAWG,WAAWC,YAAYJ,EAAAA,GAElCN,SAASO,eAAejB,KAAKC,QAAQoB,aAAAA,EAAeC,OAAAA,GACpDZ,SAASO,eAAejB,KAAKC,QAAQsB,aAAAA,EAAeD,OAAAA;IAAAA,EAAAA,GAAAA,EAAAA,KAAAA,cAAAA,OAAAA,SASjDrB,IAAAA;AACP,UAAA,WAAWA;AACP,iBAASZ,MAAOY;AACZD,eAAKC,QAAQZ,EAAAA,IAAOY,GAAQZ,EAAAA;IAAAA,EAAAA,GAAAA,EAAAA,KAAAA,gCAAAA,OAAAA,WAAAA;AAcpC,UAAImC,KAAO;AAGkB,YAAzBxB,KAAKC,QAAQwB,YACbD,KAAO,gBAAgBxB,KAAKC,QAAQwB,UAAU;AAGlD,UAAIC,KAAM;AAQV,UAL6B,MAAzB1B,KAAKC,QAAQ0B,YACbD,KAAM,gBAAgB1B,KAAKC,QAAQ0B,UAAU,MAI7C3B,KAAKC,QAAQ2B,eAAelB,SAASC,KAAKkB,SAASnB,SAASO,eAAejB,KAAKC,QAAQ2B,WAAAA,CAAAA,GAAe;AACvG,YAAIE,KAAiB,YAAH,OAAe9B,KAAKC,QAAQoB,eAA5B,oGAAA,EAAA,OAA8IrB,KAAKC,QAAQ8B,gBAA3J,gBAAA,EAAA,OAA0L/B,KAAKC,QAAQ+B,wBAAvM,4DAAA,EAAA,OAA0RhC,KAAKC,QAAQsB,eAAvS,+DAAA,EAAA,OAAoXG,IAApX,UAAA,EAAA,OAAkYF,IAAlY,oHAAA,EAAA,OAA2fxB,KAAKG,SAAhgB,QAAA,GAEdyB,KAAclB,SAASO,eAAejB,KAAKC,QAAQ2B,WAAAA;AAIvD,eAFAA,GAAYhB,MAAMqB,WAAW,YAAA,KAC7BL,GAAYM,mBAAmB,aAAaJ,EAAAA;MAAAA;AAIhD,UAAIA,KAAiB,YAAH,OAAe9B,KAAKC,QAAQoB,eAA5B,iGAAA,EAAA,OAA2IrB,KAAKC,QAAQ8B,gBAAxJ,gBAAA,EAAA,OAAuL/B,KAAKC,QAAQ+B,wBAApM,aAAA,EAAA,OAAwOhC,KAAKC,QAAQkC,eAArP,+CAAA,EAAA,OAAkTnC,KAAKC,QAAQsB,eAA/T,4DAAA,EAAA,OAAyYG,IAAzY,UAAA,EAAA,OAAuZF,IAAvZ,6GAAA,EAAA,OAAygBxB,KAAKC,QAAQmC,eAAthB,KAAA,EAAA,OAAyiBpC,KAAKG,SAA9iB,QAAA;AAGlBO,eAASC,KAAKuB,mBAAmB,aAAaJ,EAAAA;IAAAA,EAAAA,GAAAA,EAAAA,KAAAA,0BAAAA,OAAAA,WAAAA;AAOlD,UAAAhC,KAAA,MACQuC,KAAc7D,OAAO8D,KAAKtC,KAAKK,0BAAAA,EAA4BkC,KAAK,SAAAC,IAAAA;AAAO,eAAIA,OAAY1C,GAAKG,QAAQwC;MAAAA,CAAAA,GAEpGC,KAAkB1C,KAAK2C,wBAAwB3C,KAAKK,2BAA2BgC,EAAAA,CAAAA;AAEnFrC,WAAKG,UAAL,sBAAA,OAAqCH,KAAKC,QAAQ2C,cAAlD,cAAA,EAAA,OAA8E5C,KAAKC,QAAQwC,aAA3F,MAAA,EAAA,OAA8GzC,KAAKC,QAAQ4C,aAA3H,IAAA,EAAA,OAA4IH,IAA5I,QAAA;IAAA,EAAA,GAAA,EAAA,KAAA,wBAAA,OAAA,WAAA;AAWA1C,WAAK8C,wBAAAA;AAEL,UAAIC,KAAOrC,SAASsC,cAAc,MAAA;AAClCD,MAAAA,GAAKE,aAAa,MAAM,4BAAA,GACxBF,GAAKE,aAAa,OAAO,YAAA,GACzBF,GAAKE,aAAa,QAAQ,UAAA,GAC1BF,GAAKE,aAAa,QAAQjD,KAAKI,oBAAAA,GAE/BM,SAASwC,qBAAqB,MAAA,EAAQ,CAAA,EAAGC,YAAYJ,EAAAA;IAAAA,EAAAA,GAAAA,EAAAA,KAAAA,2BAAAA,OAAAA,WAAAA;AAarD/C,WAAKI,uBAAuBJ,KAAKE,oBAAoBF,KAAKC,QAAQwC,cAAc;IAAA,EAAA,GAAA,EAAA,KAAA,2BAAA,OAAA,SAS5DW,IAAAA;AAGpB,eAFIV,KAAkB,IAEb5E,KAAE,GAAGA,MAAKsF,IAAkBtF;AACjC4E,QAAAA,MAAmB;AAGvB,aAAOA;IAAAA,EAAAA,CAAAA,MAAAA,EAAAA,GAAAA,WAAAA,EAAAA,GAAAA,KAAAA,EAAAA,IAAAA,CAAAA,GAAAA;EAAAA,EAAAA;AAIfW,SAAOC,mBAAmB,IAAIvD,KAE9BlC,EAAOD,UAAU0F;AAAAA,CAAAA,CAAAA;",
  "names": ["installedModules", "__webpack_require__", "moduleId", "exports", "module", "i", "l", "modules", "call", "m", "c", "d", "name", "getter", "o", "Object", "defineProperty", "enumerable", "get", "r", "Symbol", "toStringTag", "value", "t", "mode", "__esModule", "ns", "create", "key", "bind", "n", "object", "property", "prototype", "hasOwnProperty", "p", "s", "e", "JSLoadingOverlay", "this", "options", "stylesheetBaseURL", "spinner", "spinnerStylesheetURL", "numberOfEmptyDivForSpinner", "setOptions", "addSpinnerStylesheet", "generateSpinnerElement", "lockScroll", "document", "body", "style", "overflow", "documentElement", "generateAndAddOverlayElement", "stylesheet", "getElementById", "disabled", "parentNode", "removeChild", "overlayIDName", "remove", "spinnerIDName", "left", "offsetX", "top", "offsetY", "containerID", "contains", "loadingOverlay", "overlayOpacity", "overlayBackgroundColor", "position", "insertAdjacentHTML", "overlayZIndex", "spinnerZIndex", "emptyDivKey", "keys", "find", "element", "spinnerIcon", "emptyDivElement", "generateEmptyDivElement", "spinnerColor", "spinnerSize", "setSpinnerStylesheetURL", "link", "createElement", "setAttribute", "getElementsByTagName", "appendChild", "numberOfEmptyDiv", "window", "JsLoadingOverlay"]
}
